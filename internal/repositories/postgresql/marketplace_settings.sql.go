// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: marketplace_settings.sql

package postgresql

import (
	"context"
	"database/sql"
)

const getMarketplaceSettings = `-- name: GetMarketplaceSettings :one
SELECT ms.id, ms.marketplace, ms.beneficiary, ms.royalty
FROM "marketplace_settings" ms
WHERE ms.marketplace = $1
`

func (q *Queries) GetMarketplaceSettings(ctx context.Context, marketplace string) (MarketplaceSetting, error) {
	row := q.db.QueryRowContext(ctx, getMarketplaceSettings, marketplace)
	var i MarketplaceSetting
	err := row.Scan(
		&i.ID,
		&i.Marketplace,
		&i.Beneficiary,
		&i.Royalty,
	)
	return i, err
}

const updateMarketplaceSettings = `-- name: UpdateMarketplaceSettings :one


UPDATE "marketplace_settings"
SET "marketplace" = coalesce($1, "marketplace"),
    "beneficiary" = coalesce($2, "beneficiary"),
    "royalty" = coalesce($3, "royalty")
WHERE "marketplace" = $4
RETURNING id, marketplace, beneficiary, royalty
`

type UpdateMarketplaceSettingsParams struct {
	NMarketplace sql.NullString
	NBeneficiary sql.NullString
	NRoyalty     sql.NullString
	Marketplace  string
}

// -- name: GetValidMarketplaceSettings :one
// SELECT ms.id, ms.marketplace, ms.admin, ms.signer, ms.royalty, ms.sighash, ms.signature, ms.created_at
// FROM "marketplace_settings" ms
// WHERE ms.marketplace = sqlc.arg('marketplace')
// AND ms.signature IS NOT NULL OR ms.id = 1
// ORDER BY ms.id DESC
// LIMIT 1;
// -- name: InsertMarketplaceSettings :one
// INSERT INTO "marketplace_settings" ("marketplace", "admin", "signer", "royalty", "typed_data", "sighash", "signature", "created_at")
// VALUES (sqlc.arg('marketplace'), sqlc.arg('admin'), sqlc.arg('signer'), sqlc.arg('royalty'), sqlc.arg('typed_data'), sqlc.arg('sighash'), sqlc.arg('signature'), sqlc.arg('created_at'))
// RETURNING *;
func (q *Queries) UpdateMarketplaceSettings(ctx context.Context, arg UpdateMarketplaceSettingsParams) (MarketplaceSetting, error) {
	row := q.db.QueryRowContext(ctx, updateMarketplaceSettings,
		arg.NMarketplace,
		arg.NBeneficiary,
		arg.NRoyalty,
		arg.Marketplace,
	)
	var i MarketplaceSetting
	err := row.Scan(
		&i.ID,
		&i.Marketplace,
		&i.Beneficiary,
		&i.Royalty,
	)
	return i, err
}
