// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: nft.new.sql

package postgresql

import (
	"context"

	"github.com/tabbed/pqtype"
)

const upsertNFTV2 = `-- name: UpsertNFTV2 :exec
INSERT INTO "nfts" (token, identifier, owner, metadata, is_burned)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (token, identifier) DO UPDATE SET owner     = $3,
                                              metadata  = $4,
                                              is_burned = $5
WHERE nfts.block_number < $6
   OR (nfts.block_number = $6 AND nfts.tx_index < $7)
`

type UpsertNFTV2Params struct {
	Token       string
	Identifier  string
	Owner       string
	Metadata    pqtype.NullRawMessage
	IsBurned    bool
	BlockNumber string
	TxIndex     int64
}

func (q *Queries) UpsertNFTV2(ctx context.Context, arg UpsertNFTV2Params) error {
	_, err := q.db.ExecContext(ctx, upsertNFTV2,
		arg.Token,
		arg.Identifier,
		arg.Owner,
		arg.Metadata,
		arg.IsBurned,
		arg.BlockNumber,
		arg.TxIndex,
	)
	return err
}
