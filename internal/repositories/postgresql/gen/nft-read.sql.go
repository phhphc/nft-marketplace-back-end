// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: nft-read.sql

package gen

import (
	"context"
	"database/sql"

	"github.com/tabbed/pqtype"
)

const updateNft = `-- name: UpdateNft :one
UPDATE "nfts"
    SET "is_hidden" = COALESCE($1, "is_hidden"),
        "is_burned" = COALESCE($2, "is_burned"),
        "metadata" = COALESCE($3, "metadata")
WHERE "token" = $4
  AND "identifier" = $5
RETURNING token, identifier, owner, metadata, is_burned, is_hidden, block_number, tx_index
`

type UpdateNftParams struct {
	IsHidden   sql.NullBool
	IsBurned   sql.NullBool
	Metadata   pqtype.NullRawMessage
	Token      string
	Identifier string
}

func (q *Queries) UpdateNft(ctx context.Context, arg UpdateNftParams) (Nft, error) {
	row := q.queryRow(ctx, q.updateNftStmt, updateNft,
		arg.IsHidden,
		arg.IsBurned,
		arg.Metadata,
		arg.Token,
		arg.Identifier,
	)
	var i Nft
	err := row.Scan(
		&i.Token,
		&i.Identifier,
		&i.Owner,
		&i.Metadata,
		&i.IsBurned,
		&i.IsHidden,
		&i.BlockNumber,
		&i.TxIndex,
	)
	return i, err
}

const upsertNftLatest = `-- name: UpsertNftLatest :one
INSERT INTO "nfts" ("token", "identifier", "owner", "is_burned", "block_number", "tx_index")
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT ("token", "identifier") DO UPDATE
    SET "owner"=$3,
        "is_burned"=$4,
        "block_number"=$5,
        "tx_index"=$6
WHERE $5 > nfts."block_number"
   OR ($5 = nfts."block_number" AND $6 > nfts."tx_index")
RETURNING token, identifier, owner, metadata, is_burned, is_hidden, block_number, tx_index
`

type UpsertNftLatestParams struct {
	Token       string
	Identifier  string
	Owner       string
	IsBurned    bool
	BlockNumber string
	TxIndex     int64
}

func (q *Queries) UpsertNftLatest(ctx context.Context, arg UpsertNftLatestParams) (Nft, error) {
	row := q.queryRow(ctx, q.upsertNftLatestStmt, upsertNftLatest,
		arg.Token,
		arg.Identifier,
		arg.Owner,
		arg.IsBurned,
		arg.BlockNumber,
		arg.TxIndex,
	)
	var i Nft
	err := row.Scan(
		&i.Token,
		&i.Identifier,
		&i.Owner,
		&i.Metadata,
		&i.IsBurned,
		&i.IsHidden,
		&i.BlockNumber,
		&i.TxIndex,
	)
	return i, err
}
