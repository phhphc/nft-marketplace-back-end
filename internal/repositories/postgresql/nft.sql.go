// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: nft.sql

package postgresql

import (
	"context"
	"database/sql"
)

const getNftByCollection = `-- name: GetNftByCollection :many
select n.token_id, n.contract_addr, n.owner, n.is_burned, l.listing_id, l.seller, l.price
from "nfts" n
left join "listings" l on n.token_id = l.token_id and n.contract_addr = l.collection
where l.status = 'Open' or l.listing_id is null
`

type GetNftByCollectionRow struct {
	TokenID      string         `json:"token_id"`
	ContractAddr string         `json:"contract_addr"`
	Owner        string         `json:"owner"`
	IsBurned     bool           `json:"is_burned"`
	ListingID    sql.NullString `json:"listing_id"`
	Seller       sql.NullString `json:"seller"`
	Price        sql.NullString `json:"price"`
}

func (q *Queries) GetNftByCollection(ctx context.Context) ([]GetNftByCollectionRow, error) {
	rows, err := q.db.QueryContext(ctx, getNftByCollection)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetNftByCollectionRow{}
	for rows.Next() {
		var i GetNftByCollectionRow
		if err := rows.Scan(
			&i.TokenID,
			&i.ContractAddr,
			&i.Owner,
			&i.IsBurned,
			&i.ListingID,
			&i.Seller,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertNft = `-- name: UpsertNft :exec
INSERT INTO "nfts" (token_id, contract_addr, owner, is_burned, block_number, tx_index)
VALUES ($1,$2,$3,$4, $5, $6)
ON CONFLICT (token_id, contract_addr) DO UPDATE
SET owner=$3,is_burned=$4,block_number=$5, tx_index=$6
WHERE $5 > nfts.block_number or ($5 = nfts.block_number and $6 > nfts.tx_index)
`

type UpsertNftParams struct {
	TokenID      string `json:"token_id"`
	ContractAddr string `json:"contract_addr"`
	Owner        string `json:"owner"`
	IsBurned     bool   `json:"is_burned"`
	BlockNumber  string `json:"block_number"`
	TxIndex      int64  `json:"tx_index"`
}

func (q *Queries) UpsertNft(ctx context.Context, arg UpsertNftParams) error {
	_, err := q.db.ExecContext(ctx, upsertNft,
		arg.TokenID,
		arg.ContractAddr,
		arg.Owner,
		arg.IsBurned,
		arg.BlockNumber,
		arg.TxIndex,
	)
	return err
}
