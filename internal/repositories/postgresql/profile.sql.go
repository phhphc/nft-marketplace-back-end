// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: profile.sql

package postgresql

import (
	"context"
	"database/sql"

	"github.com/tabbed/pqtype"
)

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM "profiles"
WHERE "address" = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, address string) error {
	_, err := q.db.ExecContext(ctx, deleteProfile, address)
	return err
}

const getProfile = `-- name: GetProfile :one
SELECT "address", "username", "metadata", "signature"
FROM "profiles"
WHERE "address" = $1
LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context, address string) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfile, address)
	var i Profile
	err := row.Scan(
		&i.Address,
		&i.Username,
		&i.Metadata,
		&i.Signature,
	)
	return i, err
}

const upsertProfile = `-- name: UpsertProfile :one
INSERT INTO "profiles" ("address", "username", "metadata", "signature")
VALUES ($1, $2, $3, $4)
ON CONFLICT ("address") DO UPDATE SET
  "username" = $2,
  "metadata" = $3,
  "signature" = $4
RETURNING address, username, metadata, signature
`

type UpsertProfileParams struct {
	Address   string
	Username  sql.NullString
	Metadata  pqtype.NullRawMessage
	Signature string
}

func (q *Queries) UpsertProfile(ctx context.Context, arg UpsertProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, upsertProfile,
		arg.Address,
		arg.Username,
		arg.Metadata,
		arg.Signature,
	)
	var i Profile
	err := row.Scan(
		&i.Address,
		&i.Username,
		&i.Metadata,
		&i.Signature,
	)
	return i, err
}
