// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: collection.sql

package gen

import (
	"context"
	"database/sql"

	"github.com/tabbed/pqtype"
)

const getCollection = `-- name: GetCollection :many
SELECT token, owner, co.name, ca.name as category, description, metadata, created_at
FROM collections co
         JOIN categories ca on co.category = ca.id
WHERE (token ILIKE $1 or $1 IS NULL)
  AND (owner ILIKE $2 or $2 IS NULL)
  AND (co.name ILIKE $3 or $3 IS NULL)
  AND (ca.name ILIKE $4 or $4 IS NULL)
OFFSET $5
LIMIT $6
`

type GetCollectionParams struct {
	Token    sql.NullString
	Owner    sql.NullString
	Name     sql.NullString
	Category sql.NullString
	Offset   int32
	Limit    int32
}

type GetCollectionRow struct {
	Token       string
	Owner       string
	Name        string
	Category    string
	Description string
	Metadata    pqtype.NullRawMessage
	CreatedAt   sql.NullTime
}

func (q *Queries) GetCollection(ctx context.Context, arg GetCollectionParams) ([]GetCollectionRow, error) {
	rows, err := q.query(ctx, q.getCollectionStmt, getCollection,
		arg.Token,
		arg.Owner,
		arg.Name,
		arg.Category,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCollectionRow{}
	for rows.Next() {
		var i GetCollectionRow
		if err := rows.Scan(
			&i.Token,
			&i.Owner,
			&i.Name,
			&i.Category,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionLastSyncBlock = `-- name: GetCollectionLastSyncBlock :one
SELECT "last_sync_block"
FROM collections
WHERE token = $1
`

func (q *Queries) GetCollectionLastSyncBlock(ctx context.Context, token string) (int64, error) {
	row := q.queryRow(ctx, q.getCollectionLastSyncBlockStmt, getCollectionLastSyncBlock, token)
	var last_sync_block int64
	err := row.Scan(&last_sync_block)
	return last_sync_block, err
}

const getCollectionWithCategory = `-- name: GetCollectionWithCategory :many
SELECT token, owner, co.name, ca.name as category, description, metadata, created_at
FROM collections co
         JOIN categories ca on co.category = ca.id
WHERE ca.name ILIKE $1
OFFSET $2
LIMIT $3
`

type GetCollectionWithCategoryParams struct {
	Category sql.NullString
	Offset   int32
	Limit    int32
}

type GetCollectionWithCategoryRow struct {
	Token       string
	Owner       string
	Name        string
	Category    string
	Description string
	Metadata    pqtype.NullRawMessage
	CreatedAt   sql.NullTime
}

func (q *Queries) GetCollectionWithCategory(ctx context.Context, arg GetCollectionWithCategoryParams) ([]GetCollectionWithCategoryRow, error) {
	rows, err := q.query(ctx, q.getCollectionWithCategoryStmt, getCollectionWithCategory, arg.Category, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCollectionWithCategoryRow{}
	for rows.Next() {
		var i GetCollectionWithCategoryRow
		if err := rows.Scan(
			&i.Token,
			&i.Owner,
			&i.Name,
			&i.Category,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCollection = `-- name: InsertCollection :one
INSERT INTO "collections" ("token", "owner", "name", "description","category", "metadata")
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING token, owner, name, description, metadata, category, created_at, last_sync_block
`

type InsertCollectionParams struct {
	Token       string
	Owner       string
	Name        string
	Description string
	Category    int32
	Metadata    pqtype.NullRawMessage
}

func (q *Queries) InsertCollection(ctx context.Context, arg InsertCollectionParams) (Collection, error) {
	row := q.queryRow(ctx, q.insertCollectionStmt, insertCollection,
		arg.Token,
		arg.Owner,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Metadata,
	)
	var i Collection
	err := row.Scan(
		&i.Token,
		&i.Owner,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.Category,
		&i.CreatedAt,
		&i.LastSyncBlock,
	)
	return i, err
}

const updateCollectionLastSyncBlock = `-- name: UpdateCollectionLastSyncBlock :exec
UPDATE collections
SET "last_sync_block" = $2
WHERE token = $1
`

type UpdateCollectionLastSyncBlockParams struct {
	Token         string
	LastSyncBlock int64
}

func (q *Queries) UpdateCollectionLastSyncBlock(ctx context.Context, arg UpdateCollectionLastSyncBlockParams) error {
	_, err := q.exec(ctx, q.updateCollectionLastSyncBlockStmt, updateCollectionLastSyncBlock, arg.Token, arg.LastSyncBlock)
	return err
}
