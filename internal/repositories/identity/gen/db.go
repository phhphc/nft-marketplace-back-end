// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package gen

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deleteProfileStmt, err = db.PrepareContext(ctx, deleteProfile); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProfile: %w", err)
	}
	if q.deleteUserRoleStmt, err = db.PrepareContext(ctx, deleteUserRole); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserRole: %w", err)
	}
	if q.getAllRolesStmt, err = db.PrepareContext(ctx, getAllRoles); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllRoles: %w", err)
	}
	if q.getProfileStmt, err = db.PrepareContext(ctx, getProfile); err != nil {
		return nil, fmt.Errorf("error preparing query GetProfile: %w", err)
	}
	if q.getUserByAddressStmt, err = db.PrepareContext(ctx, getUserByAddress); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByAddress: %w", err)
	}
	if q.getUserRolesStmt, err = db.PrepareContext(ctx, getUserRoles); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserRoles: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, getUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.insertUserStmt, err = db.PrepareContext(ctx, insertUser); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUser: %w", err)
	}
	if q.insertUserRoleStmt, err = db.PrepareContext(ctx, insertUserRole); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUserRole: %w", err)
	}
	if q.updateNonceStmt, err = db.PrepareContext(ctx, updateNonce); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNonce: %w", err)
	}
	if q.updateUserBlockStateStmt, err = db.PrepareContext(ctx, updateUserBlockState); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserBlockState: %w", err)
	}
	if q.upsertProfileStmt, err = db.PrepareContext(ctx, upsertProfile); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertProfile: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deleteProfileStmt != nil {
		if cerr := q.deleteProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProfileStmt: %w", cerr)
		}
	}
	if q.deleteUserRoleStmt != nil {
		if cerr := q.deleteUserRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserRoleStmt: %w", cerr)
		}
	}
	if q.getAllRolesStmt != nil {
		if cerr := q.getAllRolesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllRolesStmt: %w", cerr)
		}
	}
	if q.getProfileStmt != nil {
		if cerr := q.getProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProfileStmt: %w", cerr)
		}
	}
	if q.getUserByAddressStmt != nil {
		if cerr := q.getUserByAddressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByAddressStmt: %w", cerr)
		}
	}
	if q.getUserRolesStmt != nil {
		if cerr := q.getUserRolesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserRolesStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.insertUserStmt != nil {
		if cerr := q.insertUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserStmt: %w", cerr)
		}
	}
	if q.insertUserRoleStmt != nil {
		if cerr := q.insertUserRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserRoleStmt: %w", cerr)
		}
	}
	if q.updateNonceStmt != nil {
		if cerr := q.updateNonceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNonceStmt: %w", cerr)
		}
	}
	if q.updateUserBlockStateStmt != nil {
		if cerr := q.updateUserBlockStateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserBlockStateStmt: %w", cerr)
		}
	}
	if q.upsertProfileStmt != nil {
		if cerr := q.upsertProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertProfileStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	deleteProfileStmt        *sql.Stmt
	deleteUserRoleStmt       *sql.Stmt
	getAllRolesStmt          *sql.Stmt
	getProfileStmt           *sql.Stmt
	getUserByAddressStmt     *sql.Stmt
	getUserRolesStmt         *sql.Stmt
	getUsersStmt             *sql.Stmt
	insertUserStmt           *sql.Stmt
	insertUserRoleStmt       *sql.Stmt
	updateNonceStmt          *sql.Stmt
	updateUserBlockStateStmt *sql.Stmt
	upsertProfileStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		deleteProfileStmt:        q.deleteProfileStmt,
		deleteUserRoleStmt:       q.deleteUserRoleStmt,
		getAllRolesStmt:          q.getAllRolesStmt,
		getProfileStmt:           q.getProfileStmt,
		getUserByAddressStmt:     q.getUserByAddressStmt,
		getUserRolesStmt:         q.getUserRolesStmt,
		getUsersStmt:             q.getUsersStmt,
		insertUserStmt:           q.insertUserStmt,
		insertUserRoleStmt:       q.insertUserRoleStmt,
		updateNonceStmt:          q.updateNonceStmt,
		updateUserBlockStateStmt: q.updateUserBlockStateStmt,
		upsertProfileStmt:        q.upsertProfileStmt,
	}
}
