// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user-read.sql

package gen

import (
	"context"
	"database/sql"
	"encoding/json"
)

const getAllRoles = `-- name: GetAllRoles :many
SELECT id, name
FROM "roles"
`

func (q *Queries) GetAllRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.query(ctx, q.getAllRolesStmt, getAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByAddress = `-- name: GetUserByAddress :one
SELECT public_address, nonce, is_block
FROM "users"
WHERE public_address ILIKE $1
`

func (q *Queries) GetUserByAddress(ctx context.Context, publicAddress string) (User, error) {
	row := q.queryRow(ctx, q.getUserByAddressStmt, getUserByAddress, publicAddress)
	var i User
	err := row.Scan(&i.PublicAddress, &i.Nonce, &i.IsBlock)
	return i, err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT id, name, address, role_id
FROM "roles" r
         JOIN "user_roles" ur ON ur.role_id = r.id
WHERE ur.address = $1
`

type GetUserRolesRow struct {
	ID      int32
	Name    string
	Address string
	RoleID  int32
}

func (q *Queries) GetUserRoles(ctx context.Context, address string) ([]GetUserRolesRow, error) {
	rows, err := q.query(ctx, q.getUserRolesStmt, getUserRoles, address)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserRolesRow{}
	for rows.Next() {
		var i GetUserRolesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT json_build_object(
               'address', u."public_address",
               'nonce', u."nonce",
               'is_block', u."is_block",
               'roles', (SELECT json_agg(
                                        json_build_object(
                                                'role_id', uwr.id,
                                                'role', uwr.name
                                            )
                                    )
                         FROM (SELECT r.id, r.name
                               FROM "user_roles" ur
                                        JOIN "roles" r ON r.id = ur.role_id
                               WHERE ur.address = u.public_address
                               ORDER BY r.id ASC) uwr)
           )
FROM "users" u
WHERE u.public_address ILIKE COALESCE($1, u.public_address)
  AND u.is_block = COALESCE($2, u.is_block)
  AND u.public_address IN (SELECT DISTINCT us.public_address
                           FROM "users" us
                                    LEFT JOIN "user_roles" ur on us.public_address = ur.address
                                    LEFT JOIN "roles" r on r.id = ur.role_id
                           WHERE r.name ILIKE COALESCE($3, r.name))
ORDER BY public_address ASC
LIMIT $5 OFFSET $4
`

type GetUsersParams struct {
	PublicAddress sql.NullString
	IsBlock       sql.NullBool
	Role          sql.NullString
	Offset        int32
	Limit         int32
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]json.RawMessage, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers,
		arg.PublicAddress,
		arg.IsBlock,
		arg.Role,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []json.RawMessage{}
	for rows.Next() {
		var json_build_object json.RawMessage
		if err := rows.Scan(&json_build_object); err != nil {
			return nil, err
		}
		items = append(items, json_build_object)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
