// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: write.sql

package postgresql

import (
	"context"
	"database/sql"
)

const destroyOrders = `-- name: DestroyOrders :exec
UPDATE marketplace_order
SET is_cancelled = true, modified_at = now()
WHERE counter != $2 and offerer = $1
`

type DestroyOrdersParams struct {
	Offerer string
	Counter string
}

func (q *Queries) DestroyOrders(ctx context.Context, arg DestroyOrdersParams) error {
	_, err := q.db.ExecContext(ctx, destroyOrders, arg.Offerer, arg.Counter)
	return err
}

const insertOrder = `-- name: InsertOrder :exec
INSERT INTO
    marketplace_order(order_hash,
                      offerer,
                      is_cancelled,
                      is_validated,
                      is_fulFilled,
                      signature,
                      order_type,
                      start_time,
                      end_time,
                      counter,
                      salt,
                      zone,
                      zone_hash,
                      created_at,
                      modified_at)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12,$13, now(), now())
`

type InsertOrderParams struct {
	OrderHash   string
	Offerer     string
	IsCancelled bool
	IsValidated bool
	IsFulfilled bool
	Signature   string
	OrderType   string
	StartTime   string
	EndTime     string
	Counter     string
	Salt        string
	Zone        sql.NullString
	ZoneHash    sql.NullString
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) error {
	_, err := q.db.ExecContext(ctx, insertOrder,
		arg.OrderHash,
		arg.Offerer,
		arg.IsCancelled,
		arg.IsValidated,
		arg.IsFulfilled,
		arg.Signature,
		arg.OrderType,
		arg.StartTime,
		arg.EndTime,
		arg.Counter,
		arg.Salt,
		arg.Zone,
		arg.ZoneHash,
	)
	return err
}

const insertOrderConsideration = `-- name: InsertOrderConsideration :exec
INSERT INTO marketplace_order_consideration(order_hash, type_number, token_id, token_address, start_amount, end_amount, recipient)
VALUES($1, $2, $3, $4, $5, $6, $7)
`

type InsertOrderConsiderationParams struct {
	OrderHash    string
	TypeNumber   string
	TokenID      string
	TokenAddress string
	StartAmount  string
	EndAmount    string
	Recipient    string
}

func (q *Queries) InsertOrderConsideration(ctx context.Context, arg InsertOrderConsiderationParams) error {
	_, err := q.db.ExecContext(ctx, insertOrderConsideration,
		arg.OrderHash,
		arg.TypeNumber,
		arg.TokenID,
		arg.TokenAddress,
		arg.StartAmount,
		arg.EndAmount,
		arg.Recipient,
	)
	return err
}

const insertOrderOffer = `-- name: InsertOrderOffer :exec
INSERT INTO marketplace_order_offer(order_hash, type_number, token_id, token_address, start_amount, end_amount)
VALUES($1, $2, $3, $4, $5, $6)
`

type InsertOrderOfferParams struct {
	OrderHash    string
	TypeNumber   string
	TokenID      string
	TokenAddress string
	StartAmount  string
	EndAmount    string
}

func (q *Queries) InsertOrderOffer(ctx context.Context, arg InsertOrderOfferParams) error {
	_, err := q.db.ExecContext(ctx, insertOrderOffer,
		arg.OrderHash,
		arg.TypeNumber,
		arg.TokenID,
		arg.TokenAddress,
		arg.StartAmount,
		arg.EndAmount,
	)
	return err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE marketplace_order
SET 
    is_cancelled = coalesce($1, is_cancelled),
    is_validated = coalesce($2, is_validated),
    is_fulfilled = coalesce($3, is_fulfilled),
    modified_at = now()
WHERE order_hash = $4
`

type UpdateOrderStatusParams struct {
	IsCancelled sql.NullBool
	IsValidated sql.NullBool
	IsFulfilled sql.NullBool
	OrderHash   string
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus,
		arg.IsCancelled,
		arg.IsValidated,
		arg.IsFulfilled,
		arg.OrderHash,
	)
	return err
}
